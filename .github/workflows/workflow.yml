name: Build and Release Aurora Runtime archives

on:
  push:
    branches: "*"
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

      - name: "Install ArchLinux"
        run: |
          sudo apt update
          sudo apt install -y arch-install-scripts wget
          sudo mkdir -p /mnt/
          
          wget https://geo.mirror.pkgbuild.com/iso/latest/archlinux-bootstrap-x86_64.tar.zst
          
          sudo tar -xf archlinux-bootstrap-x86_64.tar.zst
          sudo rm -f archlinux-bootstrap-x86_64.tar.zst
          sudo mv root.x86_64 /mnt/arch
          
          sudo arch-chroot /mnt/arch bash -c "pacman-key --init && pacman-key --populate && sed -i "s/#Server/Server/g" /etc/pacman.d/mirrorlist && sed -i "s/CheckSpace/#CheckSpace/g" /etc/pacman.conf && pacman -Syu --noconfirm base base-devel git cmake meson ninja bison flex python-pip wget python-mako python-pyyaml unzip 7zip glslang glib2-devel python-docutils xmlto fop libxslt python-docutils"

      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Copy Repository to Chroot"
        run: |
          sudo cp -rf $PWD /mnt/arch/Aurora-Runtime

      - name: "Setup Basic Android (x86_64) Runtime Environment (Required for Building x86_64 glib)"
        run: |
          git clone https://github.com/termux/termux-docker.git
          sudo cp -rf termux-docker/system/x86 /mnt/arch/system
          sudo chown -R $(whoami):$(whoami) /mnt/arch/system
          sudo chmod 755 -R /mnt/arch/system
      - name: "Download mingw-llvm red rose and ndk"
        run: |
          mkdir -p build-env

          export NDK_URL="https://dl.google.com/android/repository/android-ndk-r29-beta2-linux.zip"
          export NDK_FILENAME="android-ndk.zip"
          export MINGW_URL="http://techer.pascal.free.fr/Red-Rose_MinGW-w64-Toolchain/Red-Rose-MinGW-w64-Posix-Urct-v12.0.0.r458.g03d8a40f5-Gcc-11.5.0.tar.xz"
          export MINGW_FILENAME="mingw.tar.xz"

          echo "Downloading NDK..."
          curl --output "build-env/$NDK_FILENAME" -#L "$NDK_URL"
          echo "Unpacking NDK..."
          unzip -q "build-env/$NDK_FILENAME" -d build-env
          mv "build-env/$(unzip -Z1 "build-env/$NDK_FILENAME" | cut -d "/" -f 1 | head -n 1)" "build-env/android-ndk"
          rm -f "build-env/$NDK_FILENAME"
          echo ""
          
          echo "Downloading mingw..."
          --output "build-env/$MINGW_FILENAME" -#L "$MINGW_URL"
          echo "Unpacking mingw..."
          tar -xf "build-env/$MINGW_FILENAME" -C "build-env"
          mv "build-env/$(tar -tf "build-env/$MINGW_FILENAME" | cut -d "/" -f 1 | head -n 1)/$(tar -tf "build-env/$MINGW_FILENAME" | cut -d "/" -f 2 | head -n 1)" "build-env/mingw"
          rm -f "build-env/$MINGW_FILENAME"
          echo ""
          
          # copy the build-env to Aurora-Runtime chroot
          sudo cp -r build-env /mnt/arch/Aurora-Runtime/build-env

      - name: "Start Building"
        run: |
          sudo arch-chroot /mnt/arch bash -c "cd /Aurora-Runtime && chmod +x build.sh"
          sudo arch-chroot /mnt/arch bash -c "cd /Aurora-Runtime && ./build.sh"
